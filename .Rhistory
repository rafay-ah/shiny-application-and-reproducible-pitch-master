knitr::opts_chunk$set(echo = TRUE)
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_boxplot() + facet_grid(~supp) +
ggtitle("Basic analysis ToothGrowth data")
library(ggplot2)
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_boxplot() + facet_grid(~supp) +
ggtitle("Basic analysis ToothGrowth data")
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_boxplot(aes(fill = dose)) + facet_grid(~dose) +
ggtitle("Basic analysis ToothGrowth data")
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_boxplot(aes(fill = supp)) + facet_grid(~dose) +
ggtitle("Basic analysis ToothGrowth data")
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_boxplot(aes(fill = supp)) + facet_wrap(~dose) +
ggtitle("Basic analysis ToothGrowth data")
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) +  facet_wrap(~ dose) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot() +  facet_wrap(~ dose) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = dose, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) +  facet_wrap(~ dose) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot() +  facet_wrap(~ dose) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = dose, y = len), data = ToothGrowth) +
geom_boxplot() +  facet_wrap(~ dose) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) +  facet_wrap(~ dose) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) +  facet_wrap(~ dose) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = factor(dose), y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = dose)) +  facet_wrap(~ dose) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = factor(dose), y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) +  facet_wrap(~ dose) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) +  facet_wrap(~ dose) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = dose, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) +  facet_grid(~ supp) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = dose, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = dose)) +  facet_grid(~ supp) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = dose, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) +  facet_grid(~ dose) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x = dose, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = dose)) +  facet_grid(~ supp) +ggtitle("Analyzing Tooth Growth Data")
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_boxplot() + facet_grid(~supp) + ggtitle("Basic analysis ToothGrowth data")
ggplot(aes(x=factor(dose), y=len), data = ToothGrowth) +
geom_boxplot() + facet_grid(~supp) + ggtitle("Basic analysis ToothGrowth data")
ggplot(aes(x = dose, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) +  facet_grid(~ supp) +ggtitle("Analyzing Tooth Growth Data")
ggplot(aes(x=factor(dose), y=len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))+ facet_grid(~supp) + ggtitle("Basic analysis ToothGrowth data")
ggplot(aes(x=factor(dose), y=len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))+
facet_grid(~supp) +
xlab = "Dose in milligrams" +
ggtitle("Basic analysis ToothGrowth data")
ggplot(aes(x=factor(dose), y=len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))+
facet_grid(~supp) +
xlab("Dose in milligrams") +
ggtitle("Basic analysis ToothGrowth data")
ggplot(aes(x=factor(dose), y=len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))+
facet_grid(~supp) +
xlab("Dose in milligrams") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type")) +
ggtitle("Basic analysis ToothGrowth data")
library(ggplot2)
require(gridExtra)
data(mtcars)
mtcars$am = as.factor(mtcars$am)
mtcars$cyl = as.factor(mtcars$cyl)
mtcars$gear = as.factor(mtcars$gear)
mtcars$car = as.factor(mtcars$carb)
mtcars$vs = as.factor(mtcars$vs)
auto = subset(mtcars, mtcars$am == 0)
man = subset(mtcars, mtcars$am == 1)
dev.off()
library(ggplot2)
require(gridExtra)
data(mtcars)
mtcars$am = as.factor(mtcars$am)
mtcars$cyl = as.factor(mtcars$cyl)
mtcars$gear = as.factor(mtcars$gear)
mtcars$car = as.factor(mtcars$carb)
mtcars$vs = as.factor(mtcars$vs)
auto = subset(mtcars, mtcars$am == 0)
man = subset(mtcars, mtcars$am == 1)
dev.off()
library(ggplot2)
require(gridExtra)
data(mtcars)
mtcars$am = as.factor(mtcars$am)
mtcars$cyl = as.factor(mtcars$cyl)
mtcars$gear = as.factor(mtcars$gear)
mtcars$car = as.factor(mtcars$carb)
mtcars$vs = as.factor(mtcars$vs)
auto = subset(mtcars, mtcars$am == 0)
man = subset(mtcars, mtcars$am == 1)
ggplot(mtcars, aes(x=am, y=mpg)) + geom_boxplot(data=mtcars) + labs(title='Transmission vs MPG', x='Transmission(Auto=0, Man = 1)')
t.test(man$mpg, auto$mpg)
model1 = lm(mpg ~ ., data=mtcars)
summary(model1)
data(mtcars)
sort(cor(mtcars)[1,])
model2 = lm(mpg ~ am + wt + hp, data=mtcars)
summary(model2)
anova(model1, model2)
par(mfrow = c(2,2))
plot(model2)
summary(mtcars)
str(mtcars)
summar(mtcars)
summary(mtcars)
boxplot(mpg ~ am, data = mtcars, col = "blue", ylab = "miles per gallon")
ggplot(mtcars, aes(x=am, y=mpg)) + geom_boxplot(data=mtcars) + labs(title='Transmission vs MPG', x='Transmission(Auto=0, Man = 1)')
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
am
mpg
mtcars$am
mtcars$mpg
mpg
str(mpg)
str(am)
dim(mtcars)
str(mtcars)
am
mpg
am
library(datasets)
am
data("mtcars")
head(mtcars)
am
amf
mtcars$am = as.factor(mtcars$am)
am
motorTrend <- mtcars
#Look at all the variables and their summary
#summary(motorTrend)
#Did an str on motorTrend and found that we need to convert some variables into factors
str(motorTrend)
motorTrend$amf <- factor(motorTrend$am,labels=c("Automatic","Manual"))
motorTrend$amf
fit1 <- lm(motorTrend$mpg ~ motorTrend$amf)
#Fit2 takes AMF, cyl , disp, hp, wt as regressers for our model
fit2 <- lm(mpg ~ amf + factor(cyl)+ disp + hp + wt, data=motorTrend)
#comparing coeffecients of fit1 and fit2
summary(fit1)$coef
plot(motorTrend$amf,motorTrend$mpg,col="green",ylab="MPG")
plot(motorTrend$amf,motorTrend$mpg,col="green",ylab="MPG")
fit1 <- lm(motorTrend$mpg ~ motorTrend$amf)
#Fit2 takes AMF, cyl , disp, hp, wt as regressers for our model
fit2 <- lm(mpg ~ amf + factor(cyl)+ disp + hp + wt, data=motorTrend)
summary(fit1)$coef
plot(mtcars$am,mtcars$mpg,col="green",ylab="MPG")
plot(mtcars$am,mtcars$mpg,
col="green",
xlab ="Transmission (0 = Automatic, 1 = Manual)",
main = "Boxplot of MPG vs. Transmission",
ylab="MPG")
dev.off()
plot(mtcars$am,mtcars$mpg,
col="lightgreen",
xlab ="(0) Automatic (1) Manual) Transmission",
main = "Boxplot of MPG vs. Transmission",
ylab="MPG")
plot(mtcars$am,
mtcars$mpg,
col="lightgreen",
xlab ="(0) Automatic (1) Manual Transmission",
main = "Boxplot of MPG vs. Transmission",
ylab="MPG")
dev.off()
plot(mtcars$am,
mtcars$mpg,
col="lightgreen",
xlab ="(0) Automatic (1) Manual Transmission",
main = "Boxplot of MPG vs. Transmission",
ylab="MPG")
plot(mtcars$am,
mtcars$mpg,
col="lightgreen",
xlab ="(0) Automatic (1) Manual Transmission",
main = "Boxplot of MPG vs. Transmission",
ylab="MPG")
boxplot(mpg ~ am, data = mtcars, col = "blue", ylab = "miles per gallon")
t.test(mtcars$mpg, mtcars$transmission)
t.test(manu$mpg, auto$mpg)
auto = subset(mtcars, mtcars$am == 0)
manu = subset(mtcars, mtcars$am == 1)
t.test(manu$mpg, auto$mpg)
model = lm(mpg ~ ., data=mtcars)
summary(model)
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
stepModel <- step(fmodel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
stepModel <- step(fmodel = lm(mpg ~ ., data=mtcars)
summary(fmodel)fmodel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
fmodel = lm(mpg ~ ., data=mtcars)
summary(fmodel)
stepModel <- step(fmodel = lm(mpg ~ ., data=mtcars)
summary(fmodel)fmodel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
stepModel <- step(fmodel = lm(mpg ~ ., data=mtcars)
summary(fmodel)fmodel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
stepModel <- step(fmodel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
fmodel = lm(mpg ~ ., data=mtcars)
bmodel <- step(fmodel, direction = "backward")
bmodel
summary(bmodel)
fmodel = lm(mpg ~ ., data=mtcars)
bmodel <- step(fmodel, direction = "backward")
summary(bmodel)
SModel<-lm(mpg~.,data=mtcars)
summary(SModel)
stepmodel<-step(SModel,direction='both')
summary(stepmodel)
init_model <- lm(mpg ~ ., data = mtcars)
best_model <- step(init_model, direction = "both")
summary(best_model)
stepmodel<-step(SModel,direction='both')
summary(stepmodel)
data(mtcars)
summary(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
#Result shown in the Appendix
summary(mtcars)
full.model <- lm(mpg ~ ., data = mtcars)
best.model <- step(full.model, direction = "backward")
summary(best.model)
t.test(mpg ~ am, data = mtcars)
boxplot(mpg ~ am, data = mtcars, col = "blue", ylab = "miles per gallon")
data(mtcars)
mtcars$am = as.factor(mtcars$am)
mtcars$cyl = as.factor(mtcars$cyl)
mtcars$gear = as.factor(mtcars$gear)
mtcars$car = as.factor(mtcars$carb)
mtcars$vs = as.factor(mtcars$vs)
auto = subset(mtcars, mtcars$am == 0)
manu = subset(mtcars, mtcars$am == 1)
t.test(manu$mpg, auto$mpg)
fmodel = lm(mpg ~ ., data=mtcars)
bmodel <- step(fmodel, direction = "backward")
summary(bmodel)
data(mtcars)
mtcars$am = as.factor(mtcars$am)
mtcars$cyl = as.factor(mtcars$cyl)
mtcars$gear = as.factor(mtcars$gear)
mtcars$car = as.factor(mtcars$carb)
mtcars$vs = as.factor(mtcars$vs)
auto = subset(mtcars, mtcars$am == 0)
manu = subset(mtcars, mtcars$am == 1)
t.test(manu$mpg, auto$mpg)
fmodel = lm(mpg ~ ., data=mtcars)
bmodel <- step(fmodel, direction = "backward")
summary(bmodel)
data(mtcars)
mtcars$cyl = as.factor(mtcars$cyl)
mtcars$gear = as.factor(mtcars$gear)
mtcars$car = as.factor(mtcars$carb)
mtcars$vs = as.factor(mtcars$vs)
auto = subset(mtcars, mtcars$am == 0)
manu = subset(mtcars, mtcars$am == 1)
fmodel = lm(mpg ~ ., data=mtcars)
bmodel <- step(fmodel, direction = "backward")
summary(bmodel)
stepmodel<-step(SModel,direction='both')
fmodel = lm(mpg ~ ., data=mtcars)
bmodel <- step(fmodel, direction = "both")
summary(bmodel)
fmodel = lm(mpg ~ ., data=mtcars)
bmodel <- step(fmodel, direction = "both")
summary(bmodel)
confint(bmodel)
mtcars$am = factor(mtcars$am,labels=c('automatic','manual'))
mtcars$am
mtcars$am
mtcars$auto
data(mtcars)
mtcars$am
auto = subset(mtcars, mtcars$am == 0)
manu = subset(mtcars, mtcars$am == 1)
auto
auto
str(auto)
mtcars$am
t.test(manu$mpg, auto$mpg)
fmodel = lm(mpg ~ ., data=mtcars)
summary(bmodel)
t.test(mpg~am,data=mtcars)
SModel<-lm(mpg~.,data=mtcars)
summary(SModel)
mtcars$vs = factor(mtcars$vs)
mtcars$am = factor(mtcars$am,labels=c('automatic','manual'))
mtcars$gear = factor(mtcars$gear)
mtcars$carb = factor(mtcars$carb)
t.test(mpg~am,data=mtcars)
SModel<-lm(mpg~.,data=mtcars)
summary(SModel)
32stepmodel<-step(SModel,direction='both')
summary(stepmodel)
SModel<-lm(mpg~.,data=mtcars)
summary(SModel)
stepmodel<-step(SModel,direction='both')
summary(stepmodel)
SModel<-lm(mpg~.,data=mtcars)
summary(SModel)
stepmodel<-step(SModel,direction='both')
summary(stepmodel)
SModel<-lm(mpg~.,data=mtcars)
summary(SModel)
stepmodel<-step(SModel,direction='both')
summary(stepmodel)
SModel<-lm(mpg~.,data=mtcars)
summary(SModel)
stepmodel<-step(SModel,direction='both')
summary(stepmodel)
dev.off()
basic.model <- lm(mpg ~ transmission, data = mtcars)
fit.model <- lm(mpg ~ cylinders + horsepower + weight + transmission, data = mtcars)
anova(basic.model, fit.model)
dim(dt_training); dim(dt_testing);
dim(training); dim(testing);
dim(training); dim(testing);
ttraining
dim(trim_training)
trim_training
trim_training <- read.csv(training)
dim(trim_training)
trim_training
trim_testing
read.csv("pml-training.csv")
training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(training,'pml-training.csv')
trim_training <- read.csv("pml-training.csv")
trim_testing <- read.csv("pml-testing.csv")
download.file(testing,'pml-testing.csv')
trim_testing <- read.csv("pml-testing.csv")
dim(trim_training)
dim(trim_testing)
isna_training <- trim_testing[,colSums(is.na(trim_testing)) == 0]
isna_training
rownum(isna_trianing)
rownum(isna_training)
nrow(isna_training)
nrow(trim_training)
trim_training <- read.csv("pml-training.csv")
nrow(trim_trianing)
nrow(trim_training)
trim_training <- read.csv("pml-training.csv")
isna_training <- trim_testing[,colSums(is.na(trim_training)) == 0]
nrow(isna_training)
trim_training <- read.csv("pml-training.csv")
isna_training <- trim_training[,colSums(is.na(trim_training)) == 0]
trim(isna_training)
nrow(isna_training)
ncol(trim_training)
ncol(isna_training)
trim_training <- read.csv("pml-training.csv",na.strings=c("", "NA", "NULL"))
isna_training <- trim_training[,colSums(is.na(trim_training)) == 0]
ncol(isna_training)
str(isna_training)
dim(isna_training)
isna_training <- trim_training[,-c(1:7)]
dim(isna_training)
trim_training <- read.csv("pml-training.csv",na.strings=c("", "NA", "NULL"))
trim_testing <- read.csv("pml-testing.csv",na.strings=c("", "NA", "NULL"))
isna_training <- trim_training[,colSums(is.na(trim_training)) == 0]
isna_testing <- trim_testing[,colSums(is.na(testing)) == 0]
isna_training[,-c(1:8)]
ncol(isna_training[,-c(1:8)])
ncol(isna_training)
isna_training <- trim_training[,colSums(is.na(trim_training)) == 0]
isna_training <- isna_training[,-c(1:8)]
ncol(isna_training)
str(isna_training)
str(isna_testing)
str(trim_testing)
ncol(trim_testing)
ncol(trim_training)
isna_testing <- trim_testing[,colSums(is.na(testing)) == 0]
isna_testing <- trim_testing[,colSums(is.na(trim_testing)) == 0]
ncol(isna_testing)
dim(isna_training)
dim(isna_testing)
isna_testing <- isna_testing[,-c(1:8)]
dim(isna_testing)
isna_training$classe
library(caret)
inTraining<-createDataPartition(y=isna_training$classe, p=0.70,list=F)
install.packages("caret")
library(caret)
inTraining<-createDataPartition(y=isna_training$classe, p=0.70,list=F)
inTraining
training<-isna_training[inTrain,]
test<-isna_training[-inTrain,]
dim(training)
training<-isna_training[inTraing,]
test<-isna_training[-inTraing,]
dim(training)
```
training<-isna_training[inTraining,]
test<-isna_training[-inTraining,]
dim(training)
inTraining<-createDataPartition(y=isna_training$classe, p=0.75,list=F)
training<-isna_training[inTraining,]
test<-isna_training[-inTraining,]
dim(training)
dim(teste)
dim(test)
library(caret)
set.seed(13333)
fitControl2<-trainControl(method="cv", number=5, allowParallel=T, verbose=T)
rffit<-train(classe~.,data=training, method="rf", trControl=fitControl2, verbose=F)
library(caret)
set.seed(13333)
fitControl2<-trainControl(method="cv", number=5, allowParallel=T, verbose=T)
rffit<-train(classe~.,data=training, method="rf", trControl=fitControl2, verbose=F)
package("e1071")
install.packages("e1071")
library(caret)
set.seed(13333)
fitControl2<-trainControl(method="cv", number=5, allowParallel=T, verbose=T)
rffit<-train(classe~.,data=training, method="rf", trControl=fitControl2, verbose=F)
set.seed(12345)
inTrain <- createDataPartition(isna_training$classe, p=0.6, list=FALSE)
training <- isna_training[inTrain,]
testing <- isna_training[-inTrain,]
modFitDT <- rpart(classe ~ ., data = training, method="class")
fancyRpartPlot(modFitDT)
library(rpart)
set.seed(12345)
inTrain <- createDataPartition(isna_training$classe, p=0.6, list=FALSE)
training <- isna_training[inTrain,]
testing <- isna_training[-inTrain,]
library(rpart)
modFitDT <- rpart(classe ~ ., data = training, method="class")
fancyRpartPlot(modFitDT)
rpart(classe ~ ., data = training, method="class")
fancyRpartPlot(modFitDT)
install.packages("rpart.plot")
fancyRpartPlot(modFitDT)
fancyRpartPlot()
getwd9)
getwd()
setwd("../philip.vallejo@gmail.com/coursera/shiny-application-and-reproducible-pitch")
runApp("app")
runApp("app")
runApp("app")
